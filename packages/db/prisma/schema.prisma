generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    referentialIntegrity = "prisma"
    url                  = env("DATABASE_URL")
}

// ============================================================================================
// User
// ============================================================================================

model User {
    // Start NextAuth
    id            String     @id @default(cuid())
    name          String?
    email         String     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // End NextAuth
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    handle        String?    @unique
    createdWaves  Wave[]     @relation(name: "userWaveCreated")
    starredWaves  Wave[]
    activities    Activity[]
}

// ============================================================================================
// NextAuth
// ============================================================================================

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// ============================================================================================
// Activity
// ============================================================================================

model Activity {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String
    wave        Wave     @relation(fields: [waveId], references: [id])
    waveId      String
}

// ============================================================================================
// Wave
// ============================================================================================

model Wave {
    id                    String            @id @default(cuid())
    createdAt             DateTime          @default(now())
    updatedAt             DateTime          @updatedAt
    name                  String
    rideDirection         WaveRideDirection
    offshoreWindDirection Int
    createdBy             User              @relation(name: "userWaveCreated", fields: [createdById], references: [id])
    createdById           String
    starredBy             User[]
    activities            Activity[]
    point                 Point             @relation(fields: [pointId], references: [id])
    pointId               String            @unique
}

enum WaveRideDirection {
    LEFT
    RIGHT
    BOTH
}

// ============================================================================================
// Geography
// ============================================================================================

model Point {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    timezone   String
    lng        Float
    lat        Float
    wave       Wave?
    forecast   Forecast @relation(name: "pointsToForecast", fields: [forecastId], references: [id])
    forecastId String
    location   Location @relation(fields: [locationId], references: [id])
    locationId String
}

model Location {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    country     String
    countryCode String
    region      String
    regionCode  String
    points      Point[]

    @@unique([countryCode, regionCode])
}

// ============================================================================================
// Forecast
// ============================================================================================

model Forecast {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    hex       String    @unique
    weather   Weather[]
    tide      Tide[]
    solar     Solar[]
    points    Point[]   @relation(name: "pointsToForecast")
}

model Weather {
    id                      String   @id @default(cuid())
    createdAt               DateTime @default(now())
    updatedAt               DateTime @updatedAt
    forecast                Forecast @relation(fields: [forecastId], references: [id])
    forecastId              String
    time                    DateTime
    airTemperature          Float
    waterTemperature        Float
    cloudCover              Float
    visibility              Float
    humidity                Float
    precipitation           Float
    windSpeed               Float
    windDirection           Float
    gust                    Float
    waveHeight              Float
    wavePeriod              Float
    waveDirection           Float
    windWaveHeight          Float
    windWavePeriod          Float
    windWaveDirection       Float
    swellHeight             Float
    swellPeriod             Float
    swellDirection          Float
    secondarySwellHeight    Float
    secondarySwellPeriod    Float
    secondarySwellDirection Float
}

model Tide {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    forecast   Forecast @relation(fields: [forecastId], references: [id])
    forecastId String
    time       DateTime
    type       TideType
}

enum TideType {
    LOW
    HIGH
}

model Solar {
    id         String    @id @default(cuid())
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    forecast   Forecast  @relation(fields: [forecastId], references: [id])
    forecastId String
    time       DateTime
    type       SolarType
}

enum SolarType {
    SUNRISE
    SUNSET
}
